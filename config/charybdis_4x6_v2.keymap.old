/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define GAME 1
#define NAV 2
#define SYMBOLS 3
#define NUMBERS 4
#define SPECIAL 5

#define LAUNCHER (LG(TAB))
#define CTRL_TAB (LC(TAB))
#define C_S_TAB (LC(LS(TAB)))
#define SCRNSHOT (LG(LS(S)))

#define SPC_PREVIOUS (LC(LG(LEFT)))
#define S_PRV SPC_PREVIOUS

#define SPC_NEXT (LC(LG(RIGHT)))
#define S_NXT SPC_NEXT

&sk {
  quick-release;
};

/ {

  chosen {
    zmk,battery = &vbatt;
  };

  vbatt: vbatt {
      compatible = "zmk,battery-nrf-vddh";
      label = "VBATT";
  };
/*
 *  conditional_layers {
 *      compatible = "zmk,conditional-layers";
 *      tri_layer {
 *          if-layers = <2 3>;
 *          then-layer = <4>;
 *      };
 *  };
*/

  behaviors {
      td0: tap_dance_smart_shift {
          compatible = "zmk,behavior-tap-dance";
          label = "TAP_DANCE_SMART_SHIFT";
          #binding-cells = <0>;
          tapping-term-ms = <200>;
          bindings = <&sk LSHIFT>, <&caps_word>;
      };
  };

/*                                      Charybdis 4x6 KEY MATRIX / LAYOUT MAPPING

  ╭────────────────────────────┬────────────────────────────╮ ╭─────────────────────────────┬─────────────────────────────╮
  │  0   1   2   3   4   5     │      6   7   8   9  10  11 │ │ LU5 LU4 LU3 LU2 LU1 LU0     │     RU0 RU1 RU2 RU3 RU4 RU5 │
  │ 12  13  14  15  16  17     │     18  19  20  21  22  23 │ │ LT5 LT4 LT3 LT2 LT1 LT0     │     RT0 RT1 RT2 RT3 RT4 RT5 │
  │ 24  25  26  27  28  29     │     30  31  32  33  34  35 │ │ LM5 LM4 LM3 LM2 LM1 LM0     │     RM0 RM1 RM2 RM3 RM4 RM5 │
  │ 36  37  38  39  40  41     │     42  43  44  45  46  47 │ │ LB5 LB4 LB3 LB2 LB1 LB0     │     RB0 RB1 RB2 RB3 RB4 RB5 │
  ╰───────────╮ 48  49  50     │     51  52     ╭───────────╯ ╰───────────╮ LH2 LH1 LH0     │     RH0 RH1     ╭───────────╯
              │     53  54     │     55         │                         │     LH3 LH4     │     RH2         │
              ╰────────────────┴────────────────╯                         ╰─────────────────┴─────────────────╯             */

#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS, MS) \
  combo_##NAME { \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <LAYERS>; \
    timeout-ms = <MS>; \
  };

#define COMBO_TERM_FAST 14
#define COMBO_TERM_NORMAL 20
#define COMBO_TERM_SLOW 45

combos {
  compatible = "zmk,combos";

  COMBO(q, &kp Q, 15 16, BASE NAV SYM, COMBO_TERM_NORMAL)
  COMBO(z, &kp Z, 39 40, BASE NAV SYM, COMBO_TERM_NORMAL)
  COMBO(v, &kp V, 14 15, BASE NAV SYM, COMBO_TERM_NORMAL)
  COMBO(lshift, &sk LSHIFT, 26 27, BASE NAV SYM NUM FUN, COMBO_TERM_FAST)
  COMBO(rshift, &sk RSHIFT, 32 33, BASE NAV SYM NUM FUN, COMBO_TERM_FAST)
  COMBO(numpad, &mo NUM, 48 49, BASE NAV SYM NUM FUN, COMBO_TERM_SLOW)
  COMBO(function, &mo FUN, 51 52, BASE NAV SYM NUM FUN, COMBO_TERM_SLOW)
  COMBO(backspace, &kp BSPC, 43 44, BASE NAV SYM NUM FUN, COMBO_TERM_SLOW)
  COMBO(del_word, &kp LC(BSPC), 43 55, BASE NAV SYM NUM FUN, COMBO_TERM_SLOW)
  COMBO(enter, &kp RET, 45 46, BASE NAV SYM NUM FUN, COMBO_TERM_NORMAL)
  COMBO(escape, &kp ESC, 12 13, BASE NAV SYM NUM FUN, COMBO_TERM_NORMAL)
  COMBO(dquote, &kp DQT, 20 21, BASE NAV SYM NUM FUN, COMBO_TERM_NORMAL)
  COMBO(delete, &kp DEL, 21 22, BASE NAV SYM NUM FUN, COMBO_TERM_NORMAL)
  COMBO(lbkt, &kp LBKT, 14 26, BASE NAV SYM NUM FUN, COMBO_TERM_FAST)
  COMBO(lpar, &kp LPAR, 15 27, BASE NAV SYM NUM FUN, COMBO_TERM_FAST)
  COMBO(lbrc, &kp LBRC, 16 28, BASE NAV SYM NUM FUN, COMBO_TERM_FAST)
  COMBO(labk, &kp LESS_THAN, 17 29, BASE NAV SYM NUM FUN, COMBO_TERM_FAST)
  COMBO(rabk, &kp GREATER_THAN, 18 30, BASE NAV SYM NUM FUN, COMBO_TERM_FAST)
  COMBO(rbrc, &kp RBRC, 19 31, BASE NAV SYM NUM FUN, COMBO_TERM_FAST)
  COMBO(rpar, &kp RPAR, 20 32, BASE NAV SYM NUM FUN, COMBO_TERM_FAST)
  COMBO(rbkt, &kp RBKT, 21 33, BASE NAV SYM NUM FUN, COMBO_TERM_FAST)
  COMBO(capslock, &kp CAPS, 14 21, BASE, COMBO_TERM_NORMAL)
  COMBO(capsword, &caps_word, 15 20, BASE, COMBO_TERM_NORMAL)
}; 


  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
      &kp      ESC &kp       N1 &kp       N2 &kp       N3 &kp       N4 &kp       N5                 &kp       N6 &kp       N7 &kp       N8 &kp       N9 &kp       N0 &kp      DEL
      &kp      TAB &kp        V &kp        W &kp        F &kp        P &kp        B                 &kp        J &kp        L &kp        U &kp        Y &kp     APOS &kp     BSPC
      &kp    LCTRL &kp        R &kp        S &kp        T &kp        H &kp        K                 &kp        X &kp        N &kp        A &kp        I &kp        O &kp    ENTER
      &kp   LSHIFT &repeat      &kp        C &kp        G &kp        D &kp        Q                 &kp        Z &kp        M &kp    COMMA &kp   PERIOD &repeat      &kp    RSHFT
                                             &mo  NUMBERS &kp    SPACE &mo      NAV                 &mo  SYMBOLS &kp        E
                                                          &td0         &key_repeat                  &td0
      >;
    };

    game_layer {
      bindings = <
      &kp      ESC &kp       N1 &kp       N2 &kp       N3 &kp       N4 &kp       N5                 &kp       N6 &kp       N7 &kp       N8 &kp       N9 &kp       N0 &kp      DEL
      &kp        T &kp      TAB &kp        Q &kp        W &kp        E &kp        R                 &kp        Y &kp        U &kp        I &kp        O &kp        P &kp     BSPC
      &kp        G &kp   LSHIFT &kp        A &kp        S &kp        D &kp        F                 &kp        H &kp        J &kp        K &kp        L &kp     SEMI &kp    ENTER
      &kp        B &kp    LCTRL &kp        Z &kp        X &kp        C &kp        V                 &kp        N &kp        M &kp    COMMA &kp   PERIOD &kp    SLASH &kp    RSHFT
                                             &mo  NUMBERS &kp    SPACE &mo      NAV                 &mo  NUMBERS &mo  SYMBOLS
                                                          &td0         &key_repeat                  &td0
      >;
    };

    nav_layer {
      bindings = <
      &trans       &trans       &trans       &trans       &trans       &trans                       &trans       &trans       &trans       &trans       &trans       &trans
      &trans       &sl  SPECIAL &kp  C_S_TAB &kp      TAB &kp CTRL_TAB &none                        &none        &kp     HOME &kp       UP &kp      END &kp      DEL &trans
      &trans       &sk     LGUI &sk     LALT &sk    LCTRL &sk   LSHIFT &none                        &kp     BSPC &kp     LEFT &kp     DOWN &kp    RIGHT &kp    ENTER &trans
      &trans       &kp    S_PRV &kp    LC(X) &kp    LC(C) &kp    LC(V) &kp    S_NXT                 &none        &none        &none        &none        &none        &trans
                                             &trans       &trans       &trans                       &trans       &trans
                                                          &trans       &trans                       &trans
      >;
    };

    symbols_layer {
      bindings = <
      &trans       &trans       &trans       &trans       &trans       &trans                       &trans       &trans       &trans       &trans       &trans       &trans
      &trans       &kp      ESC &kp    PRCNT &kp    QMARK &kp    COLON &kp       AT                 &kp    CARET &kp     LPAR &kp     SEMI &kp     RPAR &sl  SPECIAL &trans
      &trans       &kp     EXCL &kp     PLUS &kp    MINUS &kp    EQUAL &kp     HASH                 &kp      DQT &sk   LSHIFT &sk    LCTRL &sk     LALT &sk     LGUI &trans
      &trans       &kp    TILDE &kp   DOLLAR &kp    ASTRK &kp    SLASH &kp     AMPS                 &kp     PIPE &kp     LBRC &kp     BSLH &kp     RBRC &kp    GRAVE &trans
                                             &trans       &trans       &trans                       &trans       &trans
                                                          &trans       &trans                       &trans
      >;
    };

    numbers_layer {
      bindings = <
      &kp       F1 &kp       F2 &kp       F3 &kp       F4 &kp       F5 &kp       F6                 &kp       F7 &kp       F8 &kp       F9 &kp      F10 &kp      F11 &kp      F12
      &trans       &none        &kp       N7 &kp       N8 &kp       N9 &none                        &none        &none        &none        &none        &none        &trans
      &trans       &none        &kp       N4 &kp       N5 &kp       N6 &none                        &none        &sk   LSHIFT &sk    LCTRL &sk     LALT &sk     LGUI &trans
      &trans       &none        &kp       N1 &kp       N2 &kp       N3 &none                        &none        &kp     LBKT &kp       N0 &kp     RBKT &none        &trans
                                             &trans       &trans       &trans                       &trans       &kp       N0
                                                          &trans       &trans                       &trans
      >;
    };

    special_layer {
      bindings = <
      &to BASE     &to GAME     &trans       &trans       &trans       &trans                       &trans       &trans       &trans       &trans       &to GAME     &to BASE
      &trans       &none        &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0                 &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &none        &trans
      &trans       &none        &none        &none        &none        &none                        &none        &none        &none        &none        &none        &trans
      &trans       &none        &bt   BT_PRV &bt   BT_CLR &bt   BT_NXT &bootloader                  &bootloader  &bt   BT_PRV &bt   BT_CLR &bt   BT_NXT &none        &trans
                                             &kp LAUNCHER &trans       &trans                       &kp LAUNCHER &trans
                                                          &trans       &trans                       &trans
      >;
    };

  };

};