/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE  0
#define GAME  1
#define NAV   2
#define SYM   3
#define NUM   4
#define NUMPD 5
#define FUN   6
#define SPEC  7

#define LAUNCHER (LG(TAB))
#define CTRL_TAB (LC(TAB))
#define C_S_TAB (LC(LS(TAB)))
#define SCRNSHOT (LG(LS(S)))

#define SPC_PREVIOUS LC(LG(LEFT))
#define S_PRV SPC_PREVIOUS

#define SPC_NEXT LC(LG(RIGHT))
#define S_NXT SPC_NEXT

&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

&sk {
  quick-release;
};

/ {
    conditional_layers {
      compatible = "zmk,conditional-layers";
      tri_layer {
        if-layers = <NAV SYM>;
        then-layer = <NUM>;
      };
    };

    /*                              30 KEY MATRIX / LAYOUT MAPPING

      ╭────────────────────┬────────────────────╮ ╭─────────────────────┬─────────────────────╮
      │  0   1   2   3   4 │  5   6   7   8   9 │ │ LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 │
      │ 10  11  12  13  14 │ 15  16  17  18  19 │ │ LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 │
      │     20  21  22     │     23  24  25     │ │     LB3 LB2 LB1     │     RB1 RB2 RB3     │
      ╰───────────╮ 26  27 │ 28  29 ╭───────────╯ ╰───────────╮ LH1 LH0 │ RH0 RH1 ╭───────────╯
                  ╰────────┴────────╯                         ╰─────────┴─────────╯             */

    #define COMBO(NAME, BINDINGS, KEYPOS, LAYERS, MS) \
      combo_##NAME { \
        bindings = <BINDINGS>; \
        key-positions = <KEYPOS>; \
        layers = <LAYERS>; \
        timeout-ms = <MS>; \
      };

    #define COMBO_TERM_FAST 14
    #define COMBO_TERM_NORMAL 20
    #define COMBO_TERM_SLOW 45

    combos {
      compatible = "zmk,combos";

      COMBO(q, &kp Q, 2 3, BASE NAV SYM, COMBO_TERM_NORMAL)
      COMBO(z, &kp Z, 21 22, BASE NAV SYM, COMBO_TERM_NORMAL)
      COMBO(v, &kp V, 1 2, BASE NAV SYM, COMBO_TERM_NORMAL)
      COMBO(lshift, &sk LSHIFT, 11 12, BASE NAV SYM NUM NUMPD FUN, COMBO_TERM_FAST)
      COMBO(rshift, &sk RSHIFT, 17 18, BASE NAV SYM NUM NUMPD FUN, COMBO_TERM_FAST)
      COMBO(numpad, &mo NUMPD, 26 27, BASE GAME NAV SYM NUM NUMPD FUN, COMBO_TERM_SLOW)
      COMBO(function, &mo FUN, 28 29, BASE GAME NAV SYM NUM NUMPD FUN, COMBO_TERM_SLOW)
      COMBO(backspace, &kp BSPC, 23 24, BASE GAME NAV SYM NUM NUMPD FUN, COMBO_TERM_SLOW)
      COMBO(del_word, &kp LC(BSPC), 23 25, BASE GAME NAV SYM NUM NUMPD FUN, COMBO_TERM_SLOW)
      COMBO(enter, &kp RET, 19 25, BASE GAME NAV SYM NUM NUMPD FUN, COMBO_TERM_NORMAL)
      COMBO(escape, &kp ESC, 0 1, BASE GAME NAV SYM NUM NUMPD FUN, COMBO_TERM_NORMAL)
      COMBO(dquote, &kp DQT, 7 8, BASE GAME NAV SYM NUM NUMPD FUN, COMBO_TERM_NORMAL)
      COMBO(delete, &kp DEL, 8 9, BASE GAME NAV SYM NUM NUMPD FUN, COMBO_TERM_NORMAL)
      COMBO(lbkt, &kp LBKT, 1 11, BASE NAV SYM NUM NUMPD FUN, COMBO_TERM_FAST)
      COMBO(lpar, &kp LPAR, 2 12, BASE NAV SYM NUM NUMPD FUN, COMBO_TERM_FAST)
      COMBO(lbrc, &kp LBRC, 3 13, BASE NAV SYM NUM NUMPD FUN, COMBO_TERM_FAST)
      COMBO(labk, &kp LESS_THAN, 4 14, BASE NAV SYM NUM NUMPD FUN, COMBO_TERM_FAST)
      COMBO(rabk, &kp GREATER_THAN, 5 15, BASE NAV SYM NUM NUMPD FUN, COMBO_TERM_FAST)
      COMBO(rbrc, &kp RBRC, 6 16, BASE NAV SYM NUM NUMPD FUN, COMBO_TERM_FAST)
      COMBO(rpar, &kp RPAR, 7 17, BASE NAV SYM NUM NUMPD FUN, COMBO_TERM_FAST)
      COMBO(rbkt, &kp RBKT, 8 18, BASE NAV SYM NUM NUMPD FUN, COMBO_TERM_FAST)
      COMBO(capslock, &kp CAPS, 1 8, BASE, COMBO_TERM_NORMAL)
      COMBO(capsword, &caps_word, 2 7, BASE, COMBO_TERM_NORMAL)
      COMBO(g_ctrl, &kp LCTL, 0 10, GAME, COMBO_TERM_NORMAL)
      COMBO(g_v, &kp V, 14 22, GAME, COMBO_TERM_NORMAL)
      COMBO(g_g, &kp G, 4 14, GAME, COMBO_TERM_NORMAL)
      COMBO(g_b, &kp B, 10 20, GAME, COMBO_TERM_NORMAL)
    }; 

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Aptmak";
            bindings = <
                &key_repeat &kp W      &kp F      &kp P      &kp B           &kp J      &kp L       &kp U      &kp Y      &kp SQT
                &kp R       &kp S      &kp T      &kp H      &kp K           &kp X      &kp N       &kp A      &kp I      &kp O
                            &kp C      &kp G      &kp D                                 &kp M       &kp COMMA  &kp DOT
                                                  &mo NAV    &kp SPACE       &kp E      &mo SYM
            >;
        };

        game_layer {
            label = "Game";
            bindings = <
                &kp T       &kp Q      &kp W      &kp E      &kp R           &kp Y      &kp U       &kp I      &kp O      &kp P
                &kp LSHFT   &kp A      &kp S      &kp D      &kp F           &kp H      &kp J       &kp K      &kp L      &kp O
                            &kp Z      &kp X      &kp C                                 &kp M       &kp COMMA  &kp DOT
                                                  &mo NAV    &kp SPACE       &kp N      &mo SYM
            >;
        };

        nav_layer {
            label = "Navigation";
            bindings = <
               &kp S_PRV   &kp C_S_TAB  &kp TAB      &kp CTRL_TAB  &kp S_NXT      &kp PG_UP &kp HOME   &kp UP     &kp END      &kp DEL
               &sk LGUI    &sk LALT     &sk LCTL     &sk LSHFT     &none          &kp PG_DN &kp LEFT   &kp DOWN   &kp RIGHT    &kp RET
                           &kp LC(X)    &kp LC(C)    &kp LC(V)                              &kp BSPC   &trans     &trans
                                                     &trans        &mo SPEC       &kp RET   &trans
            >;
        };

        sym_layer {
            label = "Symbols";
            bindings = <
               &kp GRAVE  &kp PRCNT   &kp QMARK   &kp COLON   &kp AT         &kp CARET   &kp SEMI    &kp LPAR   &kp RPAR   &kp TILDE
               &kp EXCL   &kp PLUS    &kp MINUS   &kp EQUAL   &kp HASH       &kp UNDER   &sk LSHFT   &sk LCTL   &sk LALT   &sk LGUI 
                          &kp DLLR    &kp ASTRK   &kp FSLH                               &kp BSLH    &kp PIPE   &kp AMPS
                                                  &trans      &trans         &mo SPEC    &trans
            >;
        };

        num_layer {
            label = "Numbers";
            bindings = <
                &none   &kp N7  &kp N8  &kp N9  &none         &none   &kp EQUAL  &kp LT    &kp GT    &none
                &none   &kp N4  &kp N5  &kp N6  &none         &none   &sk LSHFT  &sk LCTL  &sk LALT  &sk LGUI
                        &kp N1  &kp N2  &kp N3                        &kp N0     &kp LBKT  &kp RBKT
                                        &trans  &trans        &trans  &trans
            >;
        };

        numpd_layer {
            label = "NumPad";
            bindings = <
                &none     &kp N7      &kp N8      &kp N9       &none         &kp KP_ASTERISK &kp KP_N7   &kp KP_N8   &kp KP_N9   &kp KP_MINUS
                &kp LGUI  &mt LALT N4 &mt LCTL N5 &mt LSHFT N6 &kp N0        &kp KP_SLASH    &kp KP_N4   &kp KP_N5   &kp KP_N6   &kp KP_PLUS
                          &kp N1      &kp N2      &kp N3                                     &kp KP_N1   &kp KP_N2   &kp KP_N3
                                                  &trans       &trans        &kp KP_DOT      &kp KP_N0
            >;
        };

        fun_layer {
            label = "F-keys";
            bindings = <
               &kp F12    &kp F7    &kp F8   &kp F9   &kp F10        &kp KP_NUM  &kp INS     &kp PSCRN  &kp SLCK   &kp PAUSE_BREAK
               &kp F11    &kp F4    &kp F5   &kp F6   &kp K_APP      &none       &sk LSHFT   &sk LCTL   &sk LALT   &sk LGUI
                          &kp F1    &kp F2   &kp F3                              &none       &none      &none
                                             &trans   &kp ESC        &trans      &trans
            >;
        };

       spec_layer {
            label = "Settings";
            bindings = <
               &bootloader &sys_reset    &none        &none   &to BASE    &out OUT_USB &out OUT_BLE &none        &sys_reset   &bootloader
               &none       &kp C_VOL_DN  &kp C_VOL_UP &none   &to GAME    &bt BT_CLR   &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
                           &kp C_BRI_DEC &kp C_BRI_UP &none                            &none        &none        &none
                                                      &trans  &trans      &trans       &trans
            >;
        };
    };
};
